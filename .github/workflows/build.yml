name: Build

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      
    - name: Checkout submodules
      uses: textbook/git-checkout-submodule-action@2.1.1
      
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE
      
    - name: Archive artifacts - Tests
      uses: actions/upload-artifact@v2
      with:
        name: test_executable
        path: ${{github.workspace}}/build/test/Linqplusplus_test
      
  test:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    
    - name: Download tests executable
      uses: actions/download-artifact@v2
      with:
        name: test_executable
          
    - name: Test
      working-directory: ${{github.workspace}}/build
      shell: bash
      continue-on-error: true
      run: ${{github.workspace}}/test_executable --gtest_output="xml"
   
    - name: Check Test Success
      working-directory: ${{github.workspace}}/build
      if: github.ref == 'refs/heads/master'
      shell: bash
      run: |
        if cat test_detail.xml | grep "failure type"; then
            echo "TEST_RESULT=failing" >> $GITHUB_ENV
            echo "BADGE_COLOR=red" >> $GITHUB_ENV
        else
            echo "TEST_RESULT=passing" >> $GITHUB_ENV
            echo "BADGE_COLOR=#34D058" >> $GITHUB_ENV
        fi
        
    - name: Create Badge
      uses: schneegans/dynamic-badges-action@v1.0.0
      if: github.ref == 'refs/heads/master'
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: beb364d3e95c4db5ef641cd01ff61634
        filename: test.json
        label: Tests
        message: ${{ env.TEST_RESULT }}
        color: ${{ env.BADGE_COLOR }}
        namedLogo: GitHub
        style: flat
